import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.text.DefaultCaret;

public class ClientUI extends javax.swing.JFrame {

    private static Client client;
    private static boolean isRunning = true;
    private int gramSocket;

    public ClientUI() {
        initComponents();
        spnPort.setValue(1500);
        try {
            URL whatismyip = new URL("http://checkip.amazonaws.com");
            BufferedReader in;
            in = new BufferedReader(new InputStreamReader(whatismyip.openStream()));
            String ip = in.readLine();
            txfHostname.setText(ip);
        } catch (UnknownHostException ex) {
            txfHostname.setText("localhost");
        } catch (MalformedURLException ex) {
            Logger.getLogger(ClientUI.class.getName()).log(Level.SEVERE, null, ex);
            txfHostname.setText("localhost");
        } catch (IOException ex) {
            txfHostname.setText("localhost");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaClientOut = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaClientOut1 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        spnPort = new javax.swing.JSpinner();
        txfEnterUsername = new javax.swing.JTextField();
        btnJoin = new javax.swing.JButton();
        txfHostname = new javax.swing.JTextField();
        btnLogout = new javax.swing.JButton();
        txfServer = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txfCall = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        txaConnected = new javax.swing.JTextArea();
        txaInput = new javax.swing.JTextField();
        btnEnter = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Client");
        setMinimumSize(new java.awt.Dimension(491, 484));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(235, 233, 233));

        txaClientOut.setEditable(false);
        txaClientOut.setColumns(20);
        txaClientOut.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        txaClientOut.setLineWrap(true);
        txaClientOut.setRows(5);
        txaClientOut.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txaClientOut);

        txaClientOut1.setEditable(false);
        txaClientOut1.setColumns(20);
        txaClientOut1.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        txaClientOut1.setRows(5);
        jScrollPane2.setViewportView(txaClientOut1);

        jPanel2.setBackground(new java.awt.Color(57, 186, 199));

        spnPort.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        txfEnterUsername.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfEnterUsernameKeyPressed(evt);
            }
        });

        btnJoin.setText("Join");
        btnJoin.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnJoinActionPerformed(evt);
            }
        });

        txfHostname.setText("localhost");

        btnLogout.setText("Logout");
        btnLogout.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLogout.setEnabled(false);
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        txfServer.setText("localhost");

        jLabel6.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel6.setText("Username");

        jLabel7.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel7.setText("Hostname");

        jLabel8.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel8.setText("Port number");

        jLabel10.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        jLabel10.setText("Server");

        txfCall.setEditable(false);
        txfCall.setBackground(new java.awt.Color(255, 14, 0));
        txfCall.setForeground(new java.awt.Color(254, 254, 254));
        txfCall.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txfCall.setText("Currently In Call...");
        txfCall.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel7)
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txfEnterUsername)
                    .addComponent(txfHostname, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                    .addComponent(txfServer))
                .addGap(6, 6, 6)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(spnPort, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnJoin, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(btnLogout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(txfCall))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnJoin, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spnPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel8)
                    .addComponent(txfEnterUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txfHostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txfServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txfCall, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        txaConnected.setEditable(false);
        txaConnected.setColumns(20);
        txaConnected.setFont(new java.awt.Font("SansSerif", 0, 13)); // NOI18N
        txaConnected.setLineWrap(true);
        txaConnected.setRows(5);
        txaConnected.setWrapStyleWord(true);
        jScrollPane4.setViewportView(txaConnected);

        txaInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txaInputKeyPressed(evt);
            }
        });

        btnEnter.setText("Enter");
        btnEnter.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEnter.setEnabled(false);
        btnEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnterActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText(" Message\t     -- <message>\n Whisper\t     -- /@<username> <message>\n Call\t     -- /call <username>\n End Call\t     -- /end\n Group Call\t     -- /conf <username>,<username>,...\n End Group Call   -- /end conf\n Start Rec. VN\t     -- /vn start\n Send VN\t     -- /vn send <username>\n Play VN\t     -- /vn play <id>\n Create Channel  -- /chan <channelname> <username>,...\n Msg Channel      -- /@chan <channelname> <message>\n Leave Channel    -- /chan leave <channelname>");
        jScrollPane3.setViewportView(jTextArea1);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel1.setText("Connected users:");

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel2.setText("Commands:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(txaInput, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEnter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(12, 12, 12))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txaInput, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEnter))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnterActionPerformed
        enterCommand();
    }//GEN-LAST:event_btnEnterActionPerformed

    /**
     * Respond to command entered by the client.
     */
    private void enterCommand() {
        String input = txaInput.getText().trim();
        txaInput.setText("");
        if (input.length() == 0) {
        } else if (input.startsWith("/@chan ")) {
            if (input.split(" ").length >= 3) {
                String txt = input.substring(7);
                ChatMessage msg = new ChatMessage(ChatMessage.CHANMSG, txt);
                client.sendMessage(msg);
            } else {
                txaClientOut.append("> Incorrect command syntax!\n> Refer to instructions.\n");
            }
        } else if (input.startsWith("/@")) {
            String msg = input.substring(1);
            if (input.split(" ").length >= 2) {
                client.sendMessage(new ChatMessage(ChatMessage.MESSAGE, msg));
            } else {
                txaClientOut.append("> Incorrect command syntax!\n> Refer to instructions.\n");
            }
        } else if (input.startsWith("/call ")) {
            if (client.isCalling()) {
                printToOut("You are already in a call");
                return;
            }

            String hostname = input.split(" ")[1];
            if (input.split(" ").length >= 2) {
                if (hostname.length() > 0) {
                    ChatMessage msg = new ChatMessage(ChatMessage.CALL, hostname);
                    client.sendMessage(msg);
                } else {
                    printToOut("> Choose a user to call");
                }
            } else {
                txaClientOut.append("> Incorrect command syntax!\n> Refer to instructions.\n");
            }
        } else if (input.startsWith("/conf ")) {
            if (client.isCalling()) {
                printToOut("You are already in a call");
                return;
            }
            String[] usernames = input.split(" ")[1].split(",");
            ArrayList<String> userList = new ArrayList<>(Arrays.asList(usernames));
            userList.add(client.getUsername());
            ChatMessage msg = new ChatMessage(ChatMessage.CONF, "");
            msg.setUserList(userList);
            client.sendMessage(msg);
        } else if (input.equalsIgnoreCase("/vn start")) {
            client.recordVN();
        } else if (input.startsWith("/vn send ")) {
            String destUser[] = input.split(" ");
            if (destUser.length >= 3) {
                client.sendVN(destUser[2].trim());
            } else {
                txaClientOut.append("> Incorrect command syntax!\n> Refer to instructions.\n");
            }
        } else if (input.startsWith("/vn play ")) {
            if (client.isCalling()) {
                printToOut("You cannot play a voice note during a call.");
                printToOut("To end the call type /end");
                return;
            }
            int id = Integer.parseInt(input.split(" ")[2].trim());
            client.playVN(id);
        } else if (input.equalsIgnoreCase("/end")) {
            //let dest user stop call
            printToOut("End call");
            ChatMessage msg = new ChatMessage(ChatMessage.STOPCALL, "");
            client.sendMessage(msg);
            client.stopAudioCapture();
        } else if (input.equalsIgnoreCase("/end conf")) {
            ChatMessage msg = new ChatMessage((ChatMessage.CONFSTOP), "");
            printToOut("Stop conference call");
            client.stopAudioCapture();
            client.sendMessage(msg);
        } else if (input.startsWith("/chan leave ")) {
            if (input.split(" ").length == 3) {
                String chanName = input.split(" ")[2].trim();
                ChatMessage msg = new ChatMessage(ChatMessage.CHANLEAVE, chanName);
                client.sendMessage(msg);
            } else {
                txaClientOut.append("> Incorrect command syntax!\n> Refer to instructions.\n");
            }
        } else if (input.startsWith("/chan ")) {
            if (input.split(" ").length >= 3) {
                String chanName = input.split(" ")[1].trim();
                String[] usernames = input.split(" ")[2].split(",");
                ArrayList<String> userList = new ArrayList<>(Arrays.asList(usernames));
                userList.add(client.getUsername());
                ChatMessage msg = new ChatMessage(ChatMessage.CHAN, chanName);
                msg.setUserList(userList);
                client.sendMessage(msg);
            } else {
                txaClientOut.append("> Incorrect command syntax!\n> Refer to instructions.\n");
            }
        } else if (input.startsWith("/")) {
            txaClientOut.append("> Incorrect command syntax!\n> Refer to instructions.\n");
        } else { //Message
            if (input.startsWith("***UPDATE***")) {
                return;
            }
            client.sendMessage(new ChatMessage(ChatMessage.MESSAGE, input));
        }
    }

    private void btnJoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnJoinActionPerformed
        join();
    }//GEN-LAST:event_btnJoinActionPerformed

    /**
     * Let a client join the chatroom.
     */
    private void join() {
        DefaultCaret caret = (DefaultCaret) txaClientOut.getCaret();
        caret.setUpdatePolicy(DefaultCaret.OUT_BOTTOM);
        String username = txfEnterUsername.getText().trim();
        String serverAddress = txfServer.getText().trim();
        String hostname = txfHostname.getText().trim();

        if (username.equals("")) {
            txaClientOut.setText(" *** Please enter a username. *** ");
        } else if (serverAddress.equals("")) {
            txaClientOut.append(" *** Please enter a server address. *** ");
        } else {
            int portNumber = (int) spnPort.getValue();
            client = new Client(serverAddress, portNumber, username, gramSocket, hostname);
            if (!client.start()) {
                txaClientOut.setText("*** Error starting client ***\n");
            } else {
                String initialMessage = client.readMessage();
                if (initialMessage.equals("true")) {
                    txaClientOut.setText("Welcome to the chatroom.\n");
                    btnEnter.setEnabled(true);
                    txfEnterUsername.setEditable(false);
                    btnJoin.setEnabled(false);
                    btnLogout.setEnabled(true);
                    spnPort.setEnabled(false);
                    client.startListeningFromServer();
                } else if (initialMessage.equals("false")) {
                    txaClientOut.setText("> This username already exists. Try using a new one.");
                }
            }
        }
    }


    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        close();
    }//GEN-LAST:event_btnLogoutActionPerformed

    /**
     * Close the connection of the current client safely.
     */
    private void close() {
        if (client.isCalling()) {
            ChatMessage msg = new ChatMessage(ChatMessage.STOPCALL, "");
            client.sendMessage(msg);
            client.stopAudioCapture();
        }
        isRunning = false;
        client.disconnect();
        setVisible(false);
        dispose();
        System.exit(0);
    }

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (client == null) {
            System.exit(0);
        } else if (client.checkConnection()) {
            close();
        } else {
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    private void txfEnterUsernameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfEnterUsernameKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            join();
        }
    }//GEN-LAST:event_txfEnterUsernameKeyPressed

    private void txaInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txaInputKeyPressed
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            enterCommand();
        }
    }//GEN-LAST:event_txaInputKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientUI().setVisible(true);
            }
        });
    }

    public static void printToOut(String msg) {
        txaClientOut.append("> " + msg + "\n");
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnter;
    private javax.swing.JButton btnJoin;
    private javax.swing.JButton btnLogout;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JSpinner spnPort;
    public static javax.swing.JTextArea txaClientOut;
    private static javax.swing.JTextArea txaClientOut1;
    public static javax.swing.JTextArea txaConnected;
    private javax.swing.JTextField txaInput;
    public static javax.swing.JTextField txfCall;
    private javax.swing.JTextField txfEnterUsername;
    private javax.swing.JTextField txfHostname;
    private javax.swing.JTextField txfServer;
    // End of variables declaration//GEN-END:variables
}
